@inherits Custom.Hybrid.Code12Code

@functions {
  // this is the block in charge of creating unique, new url-keys which are not yet in use
  public string GenerateCode(string prefix, int length, bool lowerOnly) {
    int maxTries = 100; // only try this 100x to not crash
    var realLength = length - prefix.Length;
    var existingKeys = AsList(App.Data["Link"])
      .Select(l => l.Key)
      .Distinct()
      .ToDictionary(k => k, null);

    for(var attempt = 0; attempt < maxTries; attempt++) {
      var newKey = prefix + RandomString(realLength, lowerOnly);
      if(!existingKeys.ContainsKey(newKey))
        return newKey;
    }

    throw new Exception("tried too many attempts, didn't find a code, will abort'");
  }

  // funky, trivial randomizer
  // got basic idea from http://stackoverflow.com/questions/1344221/how-can-i-generate-random-alphanumeric-strings-in-c
  private static Random random = new Random();

  public static string RandomString(int length, bool lowerOnly) {
    const string chars = "abcdefghijklmnopqrstuvwxyz0123456789";
    const string withUpper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" + chars;

    return new string(Enumerable.Repeat(lowerOnly ? chars : withUpper, length)
      .Select(s => s[random.Next(s.Length)]).ToArray());
  }
}