@functions {
    // 2dm extracted
    private string qrPathTemplate = "//api.qrserver.com/v1/create-qr-code/?color={foreground}&bgcolor={background}&qzone={qzone}&margin=0&size={dim}x{dim}&ecc={ecc}&data={link}";

    // 2dm added
    public string QrCodeGenerator(string fg, string bg, int size, string ecc, int qZone, string format) {
        var qrCode = qrPathTemplate
            .Replace("{qzone}", qZone.ToString())
            .Replace("{foreground}", fg.Replace("#", ""))
            .Replace("{background}", bg.Replace("#", ""))
            .Replace("{dim}", size.ToString())
            .Replace("{ecc}", ecc);
        if(format != null)
            qrCode = qrCode.Replace("&data=", "&format=" + format + "&data=");
        return qrCode;
    }

    public string TestLink(string key, bool preprocess) {
        if(preprocess) {
            key = PreprocessUrl(key);
        }
        return "/shortlink-system/en-us/desktopmodules/2sxc/api/app/shortlinks/live/api/redirect/go?key=" + key;
    }

    public string QrGenerator(){
        var set = App.Settings;
        return QrCodeGenerator(set.QrForegroundColor, set.QrBackgroundColor, Decimal.ToInt32(set.QrDimension), set.QrEcc, 0, null);
    }
    
    // to share the value across multiple calls...
    string qrPath;
       
    
    public string QrLink(string target)
    {
        target = PreprocessUrl(target);
        if(qrPath == null) qrPath = QrGenerator();
        return qrPath.Replace("{link}", target);
    }

    //#region SVG    
    // 2dm: added Path template for SVG code links
    string QrSvgPath {
        get {
            if(_qrSvgPath == null) 
                _qrSvgPath = QrCodeGenerator(
                    App.Settings.QrSvgForeground, 
                    App.Settings.QrSvgBackground, 
                    Decimal.ToInt32(App.Settings.QrSvgDimension), 
                    App.Settings.QrSvgEcc, 
                    Decimal.ToInt32(App.Settings.QrSvgQuietZone),
                    "svg");
             return _qrSvgPath;
        }
    }
    private string _qrSvgPath;

    public string QrSvgLink(string target)
    {
        target = PreprocessUrl(target);
        return App.Settings.EnablePro
            ? QrSvgPath.Replace("{link}", target)
            : "";
    }
    //#endregion

    public string QrEpsLink(string target)
    {
        target = PreprocessUrl(target);
        return App.Settings.EnablePro
            ? QrSvgPath.Replace("=svg&", "=eps&").Replace("{link}", target)
            : "";
    }


    // Special Pro feature
    // if pro is enabled, and UrlDifferentiation is activated
    // the url will be modified so the QR code has the same value, but in a way that allows it to be 
    // detected as a QR key
    // It does this by converting everything to all caps (incl. http etc.) which allows for longer codes
    // It then adds a $ at the end to mark the QR use.
    // see also https://azing.org/2sxc/r/A7LozGPM
    public string PreprocessUrl(string target)
    {
        // don't do this unless pro features are enabled
        if(!App.Settings.EnableQrUseTracking)
            return target;
        
        // requires that original url key doesn't have upper-case
        if(target.ToLower() != target)
            return "Error: can't use CAP$ on this url because it contains upper case characters - which is bad practice";

        return target.ToUpper() + "$";
    }



    // this is the block in charge of creating unique, new url-keys which are not yet in use
    int maxTries = 100; // only try this 100x to not crash
    public string GenerateCode(string prefix, int length, bool lowerOnly) {
        var realLength = length - prefix.Length;
        var existingKeys = AsDynamic(Data["Links"])
            .Select(l => l.Key)
            .Distinct()
            .ToDictionary(k => k, null);
        
        for(var attempt = 0; attempt < maxTries; attempt++) {
            var newKey = prefix + RandomString(realLength, lowerOnly);
            if(!existingKeys.ContainsKey(newKey))
                return newKey;
        }

        throw new Exception("tried too many attempts, didn't find a code, will abort'");
    }

    // funky, trivial randomizer
    // got basic idea from http://stackoverflow.com/questions/1344221/how-can-i-generate-random-alphanumeric-strings-in-c
    private static Random random = new Random();

    public static string RandomString(int length, bool lowerOnly)
    {
        const string chars = "abcdefghijklmnopqrstuvwxyz0123456789";
        const string withUpper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" + chars;
        
        return new string(Enumerable.Repeat(lowerOnly ? chars : withUpper, length)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }
}